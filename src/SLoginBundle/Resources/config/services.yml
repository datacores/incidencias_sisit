parameters:
    sp.base.url: http://127.0.0.1:8000
    idp.base.url: http://idprovidersso.ayuncordoba.org
    slogin.authz.settings:
        #If 'strict' is True, then the PHP Toolkit will reject unsignedhttps://www.google.es/?gws_rd=ssl
        # or unencrypted messages if it expects them signed or encrypted
        # Also will reject the messages if not strictly follow the SAML
        # standard: Destination, NameId, Conditions ... are validated too.
        strict: false
        # Enable debug mode (to print errors)
        debug: false
        # Service Provider Data that we are deploying
        sp:
          # Identifier of the SP entity  (must be a URI)
          entityId: "%sp.base.url%/slogin/saml2/metadata"
          # Specifies info about where and how the <AuthnResponse> message MUST be
          # returned to the requester, in this case our SP.
          assertionConsumerService:
            # URL Location where the <Response> from the IdP will be returned
            url: "%sp.base.url%/slogin/saml2/acs"
            # SAML protocol binding to be used when returning the <Response>
            # message.  Onelogin Toolkit supports for this endpoint the
            # HTTP-POST binding only.
            binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
          # Specifies info about where and how the <Logout Response> message MUST be
          # returned to the requester, in this case our SP.
          singleLogoutService:
            # URL Location where the <Response> from the IdP will be returned
            url: "%sp.base.url%/slogin/saml2/slo"
            # SAML protocol binding to be used when returning the <Response>
            # message.  Onelogin Toolkit supports for this endpoint the
            # HTTP-Redirect binding only
            binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
          # Specifies constraints on the name identifier to be used to
          # represent the requested subject.
          # Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
          NameIDFormat: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
          # Usually x509cert and privateKey of the SP are provided by files placed at
          # the certs folder. But we can also provide them with the following parameters
          x509cert: ""
          privateKey: ""
        # Identity Provider Data that we want connect with our SP
        idp:
          # Identifier of the IdP entity  (must be a URI)
          entityId: "%idp.base.url%/simplesaml/saml2/idp/metadata.php"
          # URL Target of the IdP where the SP will send the Authentication Request Message
          singleSignOnService:
            # URL Target of the IdP where the SP will send the Authentication Request Message
            url: "%idp.base.url%/simplesaml/saml2/idp/SSOService.php"
            # SAML protocol binding to be used when returning the <Response>
            # message.  Onelogin Toolkit supports for this endpoint the
            # HTTP-Redirect binding only
            binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
          # SLO endpoint info of the IdP.
          singleLogoutService:
            # URL Location of the IdP where the SP will send the SLO Request
            url: "%idp.base.url%/simplesaml/saml2/idp/SingleLogoutService.php"
            # SAML protocol binding to be used when returning the <Response>
            # message.  Onelogin Toolkit supports for this endpoint the
            # HTTP-Redirect binding only
            binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
          # Public x509 certificate of the IdP
          x509cert: "MIID1zCCA0CgAwIBAgIJAKudvjFlKnKKMA0GCSqGSIb3DQEBBQUAMIGkMQswCQYDVQQGEwJFUzEQMA4GA1UECBMHY29yZG9iYTEQMA4GA1UEBxMHQ29yZG9iYTEhMB8GA1UECgwYQXl1bnRhbWllbnRvIGRlIEPDs3Jkb2JhMSYwJAYDVQQDEx1pZHByb3ZpZGVyc3NvLmF5dW5jb3Jkb2JhLm9yZzEmMCQGCSqGSIb3DQEJARYXc2lzdGVtYXNAYXl1bmNvcmRvYmEuZXMwHhcNMTQwMTEwMTIwNTM2WhcNMTcwMTA5MTIwNTM2WjCBpDELMAkGA1UEBhMCRVMxEDAOBgNVBAgTB2NvcmRvYmExEDAOBgNVBAcTB0NvcmRvYmExITAfBgNVBAoMGEF5dW50YW1pZW50byBkZSBDw7NyZG9iYTEmMCQGA1UEAxMdaWRwcm92aWRlcnNzby5heXVuY29yZG9iYS5vcmcxJjAkBgkqhkiG9w0BCQEWF3Npc3RlbWFzQGF5dW5jb3Jkb2JhLmVzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC9Z+fvVXkCgeswVJFlLNSPp73FIrsXv6qbtMJBM55FvNcnnl8if4c3lDfTPRGNSgWkHv6aMn1xlUg17uKEQzzjeZUdOXkcDRTIUUEkXWaBf85Mvc/vO+wL6MC/eJOMOPJIg58bBH0LSbDpnCiq8S/VOfw3kA2w2Cm3IfQfsT0qZQIDAQABo4IBDTCCAQkwHQYDVR0OBBYEFC/vJhO4jsd6lj9E9t45QCHVUNtSMIHZBgNVHSMEgdEwgc6AFC/vJhO4jsd6lj9E9t45QCHVUNtSoYGqpIGnMIGkMQswCQYDVQQGEwJFUzEQMA4GA1UECBMHY29yZG9iYTEQMA4GA1UEBxMHQ29yZG9iYTEhMB8GA1UECgwYQXl1bnRhbWllbnRvIGRlIEPDs3Jkb2JhMSYwJAYDVQQDEx1pZHByb3ZpZGVyc3NvLmF5dW5jb3Jkb2JhLm9yZzEmMCQGCSqGSIb3DQEJARYXc2lzdGVtYXNAYXl1bmNvcmRvYmEuZXOCCQCrnb4xZSpyijAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAJmcQJDfGKTx5MSxORo9t1kCABDvUx6+3J3VYc91bJNIIr8caH5I0Vv0cFSWXqvyFg6N8VxC45+JCMWiiEbh6Njzj4XTYyHusvxQJGgk2+R5YHDntxHzkqErqKmfpFGNF5BJyDilaK5p3lYf1oL4uhjp41OClR8by48YR+E/njtt"
          # Instead of use the whole x509cert you can use a fingerprint
          #(openssl x509 -noout -fingerprint -in "idp.crt" to generate it)
          # 'certFingerprint' => '',
services:
    slogin.authz:
        class: OneLogin_Saml2_Auth
        arguments: [%slogin.authz.settings%]
